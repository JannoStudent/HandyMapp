@model List<street_eval_model>

@{
    street_eval_model myModel = new street_eval_model();
}
<div class="row breadcrumbRow">
    <ul class="container breadcrumbContainer">
        <li class="breadcrumbHandy visitedBreadcrumb breadcrumblineVisited"><a asp-controller="Street_eval_" asp-action="select_walking_aid"> Review choice</a></li>
        <li class="breadcrumbHandy currentBreadcrumb"><div class="breadcrumbLineCurrent"></div>Select adress/building</li>
        <li class="breadcrumbHandy">Enter your review</li>
        <li class="breadcrumbHandy">Finish your review</li>
    </ul>
</div> <!-- visitedBreadcrumb breadcrumblineVisited     <div class="breadcrumbLineCurrent"></div>       currentBreadcrumb-->
   

<!--Description-->
<div class="input-group description-container">
    <span class="input-group-btn">
        <a class="btn btn-default back-button" asp-controller="home" asp-action="index" value="Back"><span class="glyphicon glyphicon-arrow-left"></span></a>
    </span>
    <p class="description-text container-fluid">Select the street you want to review by entering streetname or dropping the marker on the map:</p>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDfFiQB4uFA8_lS-24Ll1EFUXxfGVGoJWs&libraries=places" charset="utf-8"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js" charset="utf-8"></script>
<script>
    var API_KEY = 'AIzaSyDfFiQB4uFA8_lS-24Ll1EFUXxfGVGoJWs';
    // URL for places requests
    var PLACES_URL = 'https://maps.googleapis.com/maps/api/place/details/json?' +
        'key=' + API_KEY + '&placeid=';

    // URL for Speed limits
    var SPEED_LIMIT_URL = 'https://roads.googleapis.com/v1/speedLimits';
    var coords;
    var geocoder = new google.maps.Geocoder();
    var originals = [];     // the original input points, a list of ExtendedLatLng
    var address, marker, markers, infowindow, latLng;
    var interpolate = true;
    var map, latlng, rectangle, maxzoomservice;
    var mylat, mylng, mystring, mynumber, ausgabe, coords_array;


    // GETTING COORDS AND VISALIZE THEM

    var map, latZoe, lngZoe;
    var service;
    var infoWindow;
    var service;
    var place, placeId;
    var placesearch;

    function initialize() {
        //zoetermeer coords
        latZoe = 52.0575;
        lngZoe = 4.49306;
        //set up google map
        //map Object
        map = new google.maps.Map(document.getElementById('map_canvas'), {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            //latLng: new google.maps.LatLng(latZoe, lngZoe),
            center: new google.maps.LatLng(latZoe, lngZoe),
            //mapTypeId: 'hybrid',
            zoom: 15,
            zoomControl: true,
            zoomControlOptions: {
                style: google.maps.ZoomControlStyle.LARGE
            },
            scaleControl: true,
            streetViewControl: true,
            streetViewControlOptions: {
                position: google.maps.ControlPosition.LEFT_TOP
            },
            fullscreenControl: true
        });
        /**
           * Set markers
         */
        var list_var = @Html.Raw(Json.Serialize(Model));
        var objectList = [];

        for (var i = 0; i < list_var.length; i++) {
            if (objectList.includes(list_var[i].streetname)) {
                alert("hure");
            } else {
                //var image = "~/img/mapIcons/icon_" + list_var[i].obst_type;
                //var image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';
                var imagepath = '@Url.Content("~/img/mapIcons/icon.png")';
                imagepath = imagepath.replace("icon", list_var[i].obst_type);

                objectList.push(list_var[i].streetname);
                markers = new google.maps.Marker({
                    position: new google.maps.LatLng(list_var[i].lat, list_var[i].lng),
                    map: map,
                    title: 'Click Me ',
                    icon : imagepath
                });

                google.maps.event.addListener(markers, 'click', (function (markers, i) {
                    return function () {

                        var mystreet = list_var[i].streetname;
                        var newString = mystreet.replace('"', '');

                        infowindow.setContent('<div id="marker_info_window" ' +

                            'style="max-width:250px;color:#000"> ' +
                            '<h3>Latest review</h1>' +
                           
                            '<span style="font-size:12pt"><b>Streetname: </b>' + list_var[i].streetname +
                            '</span></br>' +
                            '<span style="font-size:12pt"><b>Description: </b>' + list_var[i].description +
                            '</span>' +
                            '</br > <span style="font-size:12pt"><b>Obstacle type: </b>' + list_var[i].obst_type +

                            '</br ><span style="font-size:12pt"><b>Rating: </b>' + list_var[i].rating +
                            '</span> </br>' +
                            '</br > <form method="post" action="@Url.Action("street_eval2","Street_eval_")" >' +
                            '<input type="hidden" name="lat" value="' + list_var[i].lat + '"/>' +
                            '<input type="hidden" name="lng" value="' + list_var[i].lng + '"/>' +
                            '<input type="hidden" name="streetname" value="' + newString + '"/>' +
                           
                            '<input type="submit" style=" padding:3px 10px; background:#1370B8;border: 0 none;cursor: pointer;-webkit - border - radius: 5px; border - radius: 5px; " value="Evaluate this street" /> ' +
                            '</div > ' +
                            '</form ></br>'+
                            '<form method="post" action="@Url.Action("street_eval2","Street_eval_")" >'+
                            '<input type="submit" style=" padding:3px 10px; background:#1370B8;border: 0 none;cursor: pointer;-webkit - border - radius: 5px; border - radius: 5px; " value="See all reviews" /> ' +
                            '</form>' +
                            
                            '</div>');

                        infowindow.open(map, markers);
                    }
                })(markers, i));
                markers.setMap(map);
            }
            }

                /*
                * set markers end
                */
            marker = new google.maps.Marker({
                position: latLng,
                map: map,
                draggable: true,
                animation: google.maps.Animation.DROP
                });

            infoWindow = new google.maps.InfoWindow({
                content: '<div id="iw" style="max-width:300px;font-size:1.1em;color:#333">Drag the red marker anywhere on the map to know the approximate postal address of that location.<br>For help, please </div>'
            });
            marker.addListener('click', toggleBounce);


            var infowindow = new google.maps.InfoWindow();

            google.maps.event.addListener(marker, 'dragstart', function (e) {

                infoWindow.close();
            });

            google.maps.event.addListener(marker, 'dragend', function (e) {
                clearMarkers();
                //marker.setMap(null);
                var point = marker.getPosition();
                map.panTo(point);
                geocode(point);
            });

           /*
            * click function map
           */
            google.maps.event.addListener(map, 'click', function (event) {
                marker.setMap(null);
        placeMarker(event.latLng);
        mylat = event.latLng.lat();
        mylng = event.latLng.lng();
        latitude = mylat;
        longitude = mylng;
        var latlng = { lat: parseFloat(latitude), lng: parseFloat(longitude) };

    geocoder.geocode({ 'location': latlng }, function (results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                placeId = results[1].place_id;
                console.log(results[1].place_id);
            } else {
                window.alert('No results found');
            }
        } else {
            console.log('Geocoder failed due to: ' + status);
        }
    });

    latLng = new google.maps.LatLng(mylat, mylng);
         geocode(event.latLng);
         marker.setPosition(latLng);
         marker.setVisible(true);
         map.panTo(latLng);
         map.setZoom(17);
    });

    function placeMarker(location) {
            marker = new google.maps.Marker({
            position: location,
            map: map
        });
    }
    function clearMarkers() {
        setMapOnAll(null);
    }
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }

        }

                // Places object
                placesService = new google.maps.places.PlacesService(map);
                $('#clear').click(function (e) {
                    clearMap();
                });


                $('#toggle').click(function (e) {
                    if ($('#panel').css("display") != 'none') {
                        $('#toggle').html("+");
                        $('#panel').hide("scale", { origin: ["top", "right"] });
                    } else {
                        $('#toggle').html("&mdash;");
                        $('#panel').show("scale", { origin: ["top", "right"] });
                    }
                });
                //initialize places service to perform TextSearch
                service = new google.maps.places.PlacesService(map);
                var defaultBounds = new google.maps.LatLngBounds(
                    new google.maps.LatLng(52.093302, 4.558484),
                    new google.maps.LatLng(52.031030, 4.414744));

                var input = document.getElementById('searchfield');
                var options = {
                    bounds: defaultBounds
                };

                autocomplete = new google.maps.places.Autocomplete(input, options);
                autocomplete.bindTo('bounds', map);

                google.maps.event.addListener(autocomplete, 'place_changed', function () {
                    clearMarkers();
                    infoWindow.close();
                    marker.setVisible(false);
                    place = autocomplete.getPlace();
                    placesearch = $('#searchfield').val();
                    document.getElementById('map_canvas').style.visibility = 'visible';
                    $.getJSON("https://maps.googleapis.com/maps/api/geocode/json?address=" + placesearch + "&key=" + API_KEY, function (data) {
                        mystring = data.results[0].formatted_address;
                        mylat = data.results[0].geometry.location.lat;
                        mylng = data.results[0].geometry.location.lng;
                        placeId = place.place_id;

                        latLng = new google.maps.LatLng(mylat, mylng);
                        geocode(latLng);
                        marker.setPosition(latLng);
                        marker.setVisible(true);
                        map.panTo(latLng);

                    });

                    if (!place.geometry) {
                        window.alert("Autocomplete's returned place contains no geometry");
                        return;
                    }
                    map.setZoom(17);
                    //updateMap();
                });

                function geocode(position) {
                    geocoder.geocode({
                        latLng: position
                    }, function (responses) {
                        //var pos = marker.getPosition();
                        window.location.hash = '#' + latLng.lat() + "," + latLng.lng();
                        //marker.setPosition(latLng.lat().toString(), latLng.lng().toString());
                        //alert("KUCKST DU OB RICHTIG " + latLng.lat() + "," + latLng.lng());
                        if (responses && responses.length > 0) {
                            showInfoWindow(responses[0].formatted_address);
                        } else {
                            console.log('Sorry but Google Maps could not determine the approximate postal address of this location.');
                        }
                    });
                }

                function showInfoWindow(address) {
                    var html_infowindow = '';
                    var html_eval_text = '';
                    var html_eval_button = '';
                    //var pos = marker.getPosition();
                    // window.location.hash = '#' + pos.lat() + "," + pos.lng();
                    window.location.hash = '#' + latLng.lat() + "," + latLng.lng();
                    html_infowindow += '<b>Postal Address:</b> </br>' + address;
                    //html_infowindow += '<b>placeID: </b> ' + placeId;
                    html_infowindow += '<br><small>' + '<i class="ti ti-location-pin"></i> Latitude: ' + latLng.lat().toString().substr(0, 10) + ' &nbsp; Longitude: ' + latLng.lng().toString().substr(0, 10) + '</small><br>';
                    html_eval_text += '<b><span style="font-size:150%;">Selected Street:</b> </br>' + address + '</span>';
                    html_eval_button += '<form method="POST" id=\"sampleForm\" action="\street_eval2\" controller="\Street_eval_\">' +

                        '<input style=\"visibility: hidden; position: absolute;\" name=\"lat\" type=\"text\" value="' + mylat + '">' +
                        '<input style=\"visibility: hidden; position: absolute;\"  name=\"lng\" type=\"text\" value="' + mylng + '">' +
                        '<input style=\"visibility: hidden; position: absolute;\"  name=\"streetname\" type=\"text\" value="' + address + '">' +
                        '<button type=\"submit\" style=\"position: relative\"class=\"btn btn-success btn-lg btn-block\">Evaluate this street <span class=\"glyphicon glyphicon-arrow-right\"></span></button>' +
                        ' </form> ';

                    var pos = new google.maps.LatLng(mylat, mylng);
                    map.panTo(pos);
                    //"<br><button type='button' style='font-size:200%;' class='btn btn-primary'></button></span>
                    infoWindow.setContent("<div id='iw' style='max-width:250px;color:#000'>" + html_infowindow + "</div>");
                    document.getElementById("info_to_street").innerHTML = '<span style="font-size:120%; margin: 0;">' + html_eval_text;
                    document.getElementById("info_to_street_confirm").innerHTML = html_eval_button;
                    /*document.getElementById("info_to_street").addEventListener('click', function () {
                        //Response.Redirect("street_eval2.aspx?Parameter=" + TextBox1.Text);
                       // alert();
                        /*$.post("Home/street_eval2", { lat: mylat, lng: mylng }, function (data) {
                            //do whatever with the response
                            alert();
                            //window.location.href = "Home/street_eval2";
                        });
                        //});

          }, false);*/

                    infoWindow.open(map, marker);
                }
                function showAddress(val) {
                    if (val === "") {
                        alert("Please enter a search query");
                        return;
                    }
                    infoWindow.close();
                    geocoder.geocode({
                        'address': decodeURI(val)
                    }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            marker.setPosition(results[0].geometry.location);
                            //map.panTo(marker.getPosition());
                            geocode(results[0].geometry.location);
                        } else {
                            defaultLocation();
                            alert("Sorry but Google Maps could not find this location.");
                        }
                    });
                }
                function defaultLocation() {
                    initialize();
                    //alert("default locatie");
                }
                function toggleBounce() {
                    if (marker.getAnimation() !== null) {
                        marker.setAnimation(null);
                    } else {
                        marker.setAnimation(google.maps.Animation.BOUNCE);
                    }
                }

                function locationFound(position) {
                    showMap(position.coords.latitude, position.coords.longitude);
                }


                function clearMap() {
                    // Clear the polyline
                    for (var i = 0; i < polylines.length; i++) {
                        polylines[i].setMap(null);
                    }
                    // Clear all markers
                    for (var i = 0; i < markers.length; i++) {
                        markers[i].setMap(null);
                    }
                    rectangle.setMap(null);
                    // Empty everything
                    polylines = [];
                    markers = [];
                    //boundsC = [];
                    snappedCoordinates = [];
                    placeIds = [];
                    infoWindows = [];
                    $('#unsnappedPoints').empty();
                }
                // Parse the value in the input element
                // to get all coordinates
                function parseCoordsFromQuery(input) {
                    var coords;
                    input = decodeURIComponent(input);
                    if (input.split('path=').length > 1) {
                        input = decodeURIComponent(input);
                        // Split on the ampersand to get all params
                        var parts = input.split('&');
                        // Check each part to see if it starts with 'path='
                        // grabbing out the coordinates if it does
                        for (var i = 0; i < parts.length; i++) {
                            if (parts[i].split('path=').length > 1) {
                                coords = parts[i].split('path=')[1];
                                break;
                            }
                        }
                    } else {
                        coords = decodeURIComponent(input);
                    }

                    // Parse the "Lat,Lng|..." coordinates into an array of ExtendedLatLng
                    originals = [];
                    var points = coords.split('|');
                    for (var i = 0; i < points.length; i++) {
                        var point = points[i].split(',');
                        originals.push({ lat: Number(point[0]), lng: Number(point[1]), index: i });
                    }

                    return coords;
                }
                // Clear the map of any old data and plot the request
                $('#plot').click(function (e) {
                    clearMap();
                    bendAndSnap();
                    e.preventDefault();
                });


                // Infowindow used for unsnappable coordinates
                function addBasicInfoWindow(marker, coords, index) {
                    var infowindow = new google.maps.InfoWindow();
                    var content = '<div style="width:99%"><p>' +
                        '<strong>Lat/Lng:</strong><br>' +
                        '(' + coords.lat + ',' + coords.lng + ')<br>' +
                        (index != undefined ? '<strong>Index: </strong>' + index : '') +
                        '</p></div>';

                    infowindow.setContent(content);

                    google.maps.event.addListener(marker, 'click', function () {
                        openInfoWindow(infowindow, marker);
                    });

                    return infowindow;
                }

                // Infowindow used for snapped points
                // Makes request to Places Details API to get data about each
                // Place ID.
                // Requests speed limit of each location using Roads SpeedLimit API
                function addDetailedInfoWindow(marker, coords, placeId) {
                    var infowindow = new google.maps.InfoWindow();
                    var placesRequestUrl = PLACES_URL + placeId;
                    var detailsUrl = '<a target="_blank" href="' +
                        placesRequestUrl + '">' +
                        placeId + '</a></li>';

                    // On click we make a request to the Places API
                    // This is to avoid OVER_QUERY_LIMIT if we just requested everything
                    // at the same time
                    google.maps.event.addListener(marker, 'click', function () {
                        content = '<div style="width:99%"><p>';

                        function finishInfoWindow(placeDetails) {
                            content += '<strong>Place Details: </strong>' + placeDetails + '<br>' +
                                '<strong>' +
                                (coords.interpolated ? 'Coords' : 'Snapped coords') +
                                ': </strong>' +
                                '(' + coords.lat.toFixed(5) + ',' +
                                coords.lng.toFixed(5) + ')<br>';

                            if (!(coords.interpolated)) {
                                var original = originals[coords.originalIndex];
                                content += '<strong>Original coords: </strong>' +
                                    '(' + original.lat + ',' + original.lng + ')<br>' +
                                    '<strong>Original Index: </strong>' +
                                    coords.originalIndex;
                            }
                            content += '</p></div>';
                            infowindow.setContent(content);
                            openInfoWindow(infowindow, marker);
                        };

                        getPlaceDetails(placeId, function (place) {
                            if (place.name) {
                                content += '<strong>' + place.name + '</strong><br>';
                            }
                            getSpeedLimit(placeId, function (data) {
                                if (data.speedLimits) {
                                    content += '<strong>Speed Limit: </strong>' +
                                        data.speedLimits[0].speedLimit + ' km/h <br>';
                                }
                                finishInfoWindow(detailsUrl);
                            });
                        }, function () { finishInfoWindow("<em>None available</em>"); });
                    });
                    return infowindow;
                }

                // Avoid infoWindows staying open if the pano changes
                listenForPanoChange();

                // If the user came to the page with a particular path or URL,
                // immediately plot it.
                if (location.hash.length > 1) {
                    coords = parseCoordsFromQuery(location.hash.slice(1));
                    $('#coords').val(coords);
                    $('#plot').click();
                }
            } // End init function

            // Call the initialize function once everything has loaded
            google.maps.event.addDomListener(window, 'load', initialize);

            //Load the control panel in a floating div if it is not loaded in an iframe
            //after the textarea has been rendered
            $("#coords").ready(function () {
                if (!window.frameElement) {
                    $('#panel').addClass("floating panel");
                    $('#button-div').addClass("button-div");
                    $('#coords').removeClass("coords-large").addClass("coords-small");
                    $('#toggle').show();

                }
            });




            /**
              * Add a marker to the map and check for special 'interpolated'
              * and 'unsnapped' properties to control which colour marker is used
              * param {ExtendedLatLng} coords - Coords of where to add the marker
              * return {!Object} marker - the marker object created
              */
            function addMarker(coords) {
                var marker = new google.maps.Marker({
                    position: coords,
                    title: coords.lat + ',' + coords.lng,
                    map: map,
                    opacity: 0.5
                });
                coords.marker = marker;  // Save a reference for easy access later
                markers.push(marker);

                return marker;
            }

            /**
              * Animate an icon along a polyline
              * param {Object} polyline The line to animate the icon along
              */
            function animateCircle(polyline) {
                var count = 0;
                // fallback icon if the poly has no icon to animate
                var defaultIcon = [
                    {
                        icon: lineSymbol,
                        offset: '100%'
                    }
                ];
                window.setInterval(function () {
                    count = (count + 1) % 200;
                    var icons = polyline.get('icons') || defaultIcon;
                    icons[0].offset = (count / 2) + '%';
                    polyline.set('icons', icons);
                }, 20);
            }

            /**
              * Fit the map bounds to the current set of markers
              * param {Array<Object>} markers Array of all map markers
              */
            function fitBounds(markers) {
                var bounds = new google.maps.LatLngBounds;
                for (var i = 0; i < markers.length; i++) {
                    bounds.extend(markers[i].getPosition());
                }
                map.fitBounds(bounds);
            }

            /**
              * Uses Places library to get Place Details for a Place ID
              * param {string}   placeId         The Place ID to look up
              * param {Function} foundCallback   Called if the place is found
              * param {Function} missingCallback Called if nothing is found
              * param {Function} errorCallback   Called if request fails
              */
            function getPlaceDetails(placeId,
                foundCallback, missingCallback, errorCallback) {
                var request = {
                    placeId: placeId
                };

                placesService.getDetails(request, function (place, status) {
                    if (status == google.maps.places.PlacesServiceStatus.OK) {
                        foundCallback(place);
                    } else if (status == google.maps.places.PlacesServiceStatus.NOT_FOUND) {
                        missingCallback();
                    } else if (errorCallback) {
                        errorCallback();
                    }
                });
            }

            /**
              * AJAX request to the Roads Speed Limit API.
              * Request the speed limit for the Place ID
              * param {string}   placeId         Place ID to request the speed limit for
              * param {Function} successCallback Called if request is successful
              * param {Function} errorCallback   Called if request fails
              */
            function getSpeedLimit(placeId, successCallback, errorCallback) {
                $.ajax({
                    type: 'GET',
                    url: SPEED_LIMIT_URL,
                    data: {
                        placeId: placeId,
                        key: API_KEY
                    },
                    success: successCallback,
                    error: errorCallback
                });
            }

            /**
              * Open an infowindow on either the map or the active streetview pano
              * param {Object} infowindow Infowindow to be opened
              * param {Object} marker Marker the infowindow is anchored to
              */
            function openInfoWindow(infowindow, marker) {
                // If streetView is visible display the infoWindow over the pano
                // and anchor to the marker
                if (map.getStreetView().getVisible()) {
                    infowindow.open(map.getStreetView(), marker);
                }
                // Otherwise open it on the map and anchor to the marker
                else {
                    infowindow.open(map, marker);
                }
            }

            /**
              * Add event listener to for when the active pano changes
              */
            function listenForPanoChange() {
                var pano = map.getStreetView();

                // Close all open markers when the pano changes
                google.maps.event.addListener(pano, 'position_changed', function () {
                    closeAllInfoWindows(infoWindows);
                    clearMarkers();
                });
            }

            /**
              * Close all open infoWindows
              * param {Array<Object>} infoWindows - all infowindow objects
              */
            function closeAllInfoWindows(infoWindows) {
                for (var i = 0; i < infoWindows.length; i++) {
                    infoWindows[i].close();
                }
            }
            var ne, sw, nw, se;
            function updateMap() {
                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    // Use the viewport if it is provided.
                    map.fitBounds(place.geometry.viewport);

                    map.setZoom(17);

                } else {
                    // Otherwise use the location and set a chosen zoom level.
                    map.setCenter(place.geometry.location);
                    map.setZoom(19);
                }
            }

            $(function () {
                initialize();
            });

</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js" charset="utf-8"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" charset="utf-8"></script>

<div class="container street-eval-form" style="max-width: 100%">
    <div class="form-group col-lg-4">
        <label class="from-to">Address:</label>
        <input type="text" class="form-control" name="searchfield" id="searchfield" placeholder="Type in the address you want to review..." autofocus>
    </div>
    <div class="form-group col-lg-4">
        <div id="info_to_street" style=" height:100%;  width:100%;" value=""></div>
    </div>
    <div class="form-group col-lg-4">
        <div class="button-confirm" id="info_to_street_confirm" style="padding-top: 10px;" value=""></div>
    </div>

</div>

<div id="map_canvas" style="width:100%; height: 360px"></div>