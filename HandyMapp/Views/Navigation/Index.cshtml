@model GoogleMapsAPI.NET.API.Directions.Responses.GetDirectionsResponse
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="pac-card" id="pac-card">
    <div>
        <div id="title">
            Navigation
        </div>
    </div>
    <div id="pac-container">
        <form method="post">
            <input id="pac-input2" type="text" name="from" placeholder="Enter a location">
            <br />
            <input id="pac-input1" type="text" name="to" placeholder="Enter a location">
            <br />
            <button class="btn btn-default" style="margin: 10px 10px 10px 80%;" type="submit"> search</button>
        </form>
    </div>
</div>

<div id="map"></div>
<div id="infowindow-content">
    <img src="" width="16" height="16" id="place-icon">
    <span id="place-name" class="title"></span><br>
    <span id="place-address"></span>
</div>

@if (Model != null)
{
    <script>
    function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 3,
                center: { lat: 0, lng: -180 },
                mapTypeId: 'terrain'
            });


            var flightPlanCoordinates = @Html.Raw(Json.Serialize(Model.Routes[0].OverviewPath));

            var flightPath = new google.maps.Polyline({
                path: flightPlanCoordinates,
                geodesic: true,
                strokeColor: '#FF0000',
                strokeOpacity: 0.6 ,
                strokeWeight: 3
            });

            flightPath.setMap(map);

            var flightPlanCoordinates1 = @Html.Raw(Json.Serialize(Model.Routes[1].OverviewPath));

            var flightPath1 = new google.maps.Polyline({
                path: flightPlanCoordinates1,
                geodesic: true,
                strokeColor: '#4286f4',
                strokeOpacity: 0.6,
                strokeWeight: 3
            });

            flightPath1.setMap(map);

            var flightPlanCoordinates2 = @Html.Raw(Json.Serialize(Model.Routes[2].OverviewPath));

            var flightPath2 = new google.maps.Polyline({
                path: flightPlanCoordinates2,
                geodesic: true,
                strokeColor: '#4bef39',
                strokeOpacity: 0.6,
                strokeWeight: 3
            });

            flightPath2.setMap(map);
        </script>
}
else
{
    <script>


            function initMap() {
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: { lat: -33.8688, lng: 151.2195 },
                    zoom: 13
                });
                var card = document.getElementById('pac-card');
                var input1 = document.getElementById('pac-input1');
                var input2 = document.getElementById('pac-input2');
                var types = document.getElementById('type-selector');
                var strictBounds = document.getElementById('strict-bounds-selector');

                map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

                var autocomplete = new google.maps.places.Autocomplete(input1);
                var autocomplete = new google.maps.places.Autocomplete(input2);

                // Bind the map's bounds (viewport) property to the autocomplete object,
                // so that the autocomplete requests use the current map bounds for the
                // bounds option in the request.
                autocomplete.bindTo('bounds', map);

                var infowindow = new google.maps.InfoWindow();
                var infowindowContent = document.getElementById('infowindow-content');
                infowindow.setContent(infowindowContent);
                var marker = new google.maps.Marker({
                    map: map,
                    anchorPoint: new google.maps.Point(0, -29)
                });

                autocomplete.addListener('place_changed', function () {
                    infowindow.close();
                    marker.setVisible(false);
                    var place = autocomplete.getPlace();
                    if (!place.geometry) {
                        // User entered the name of a Place that was not suggested and
                        // pressed the Enter key, or the Place Details request failed.
                        window.alert("No details available for input: '" + place.name + "'");
                        return;
                    }

                    // If the place has a geometry, then present it on a map.
                    if (place.geometry.viewport) {
                        map.fitBounds(place.geometry.viewport);
                    } else {
                        map.setCenter(place.geometry.location);
                        map.setZoom(17);  // Why 17? Because it looks good.
                    }
                    marker.setPosition(place.geometry.location);
                    marker.setVisible(true);

                    var address = '';
                    if (place.address_components) {
                        address = [
                            (place.address_components[0] && place.address_components[0].short_name || ''),
                            (place.address_components[1] && place.address_components[1].short_name || ''),
                            (place.address_components[2] && place.address_components[2].short_name || ''),
                            (place.address_components[1] && place.address_components[3].short_name || ''),
                            (place.address_components[2] && place.address_components[4].short_name || '')
                        ].join(' ');
                    }

                    infowindowContent.children['place-icon'].src = place.icon;
                    infowindowContent.children['place-name'].textContent = place.name;
                    infowindowContent.children['place-address'].textContent = address;
                    infowindow.open(map, marker);
                });

                document.getElementById('use-strict-bounds')
                    .addEventListener('click', function () {
                        console.log('Checkbox clicked! New state=' + this.checked);
                        autocomplete.setOptions({ strictBounds: this.checked });
                    });
            }
    </script>
        
    }

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDfFiQB4uFA8_lS-24Ll1EFUXxfGVGoJWs&libraries=places&callback=initMap"
            async defer>
        </script>
