@using GoogleMapsAPI.NET.API.Places.Components
@model IEnumerable<PlacePrediction>

@{
    ViewData["Title"] = "TestAPI";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Style {
    <link rel="stylesheet" href="~/css/GoogleMapsApi.css" />
    <link href="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/css/bootstrap.css" rel="stylesheet" />
}

<h2>TestAPI</h2>
<div class="container">
    <div class="form-group ui-widget">
        <label>Languages</label>
        <input class="form-control search" id="search" placeholder="Enter A" />
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col-md-9" id="map"></div>
        <div class="col-md-3" id="panel">
            <div id="addressDescriptionPannel"></div>
            <hr />
            <div id="descriptionPannel"></div>
        </div>
    </div>
</div>

<script>
    function initMap() {
        var map = new window.google.maps.Map(document.getElementById('map'), {
            center: { lat: 52.058295, lng: 4.4950389 },
            zoom: 13
        });

        var markersArray = [];
        var geocoder = new window.google.maps.Geocoder;
        var service = new window.google.maps.places.PlacesService(map);
        var infoWindow = new google.maps.InfoWindow();


        window.google.maps.event.addListener(map, 'click', function (event) {
            clearOverlays();
            geocodeLatLng(geocoder, map, event.latLng);
            infoWindow.close();
        });

        function geocodeLatLng(geocoder, map, latlng) {
            geocoder.geocode({ 'location': latlng }, function (results, status) {
                if (status === 'OK') {
                    if (results[0]) {
                        map.setZoom(18);
                        markersArray.push(new window.google.maps.Marker({
                            position: latlng,
                            animation: window.google.maps.Animation.DROP,
                            map: map
                        }));
                        //infowindow.open(map, markersArray[0]);
                        $("#address").text(results[0].formatted_address);
                        $("#placeID").text(results[0].place_id);
                        setAddressDescription(results[0]);
                        console.log(results[0]);
                        //placeDetailsById(results[0].place_id);
                        placeResultsByGeo(latlng);
                        map.panTo(latlng);
                    } else {
                        window.alert('No results found');
                    }
                } else {
                    window.alert('Geocoder failed due to: ' + status);
                }
            });
        }

        function setAddressDescription(result) {
            var description = "<b> Address </b>";
            if (result.title) description += "<lable> " + result.title + "</lable>";
            description += "<br/>";
            description += "<lable>" + result.formatted_address + "</lable><br/>";
            description += "<form id=\"sampleForm\" action=\"\"> " +
                "<input style=\"visibility: hidden\"  type=\"text\" value=" + result.place_id + " name=\"fname\">" +
                "<button type=\"submit\" class=\"btn btn-default\">Evaluate</button> " +
                "</form>";
            document.getElementById('addressDescriptionPannel').innerHTML = description;
        }

        function placeResultsByGeo(latLng) {
            service.nearbySearch({
                location: latLng,
                radius: '10'
            }, function (results, status) {
                if (status === window.google.maps.places.PlacesServiceStatus.OK) {
                    console.log(results);
                    var description = "";
                    results.forEach(function (result) {
                        if (result.name !== "Zoetermeer" && result.place_id) {
                            if (result.name) description += "<b>" + result.name + "</b><br/>";
                            if (result.photos) description += "<img src=\"" + result.photos[0].getUrl({ 'maxWidth': 250, 'maxHeight': 250 }) + "\"><br/>";
                            if (result.vicinity) description += "<lable>" + result.vicinity + "</label><br/>";
                            if (result.rating) description += "<lable> Rating: " + result.rating + "</label><br/>";
                            if (result.name) description += "<lable>" + result.name + "</label>";

                            description += "<form id=\"sampleForm\" action=\"\"> " +
                                "<input style=\"visibility: hidden\"  type=\"text\" value=" + result.place_id + " name=\"fname\">" +
                                "<button type=\"submit\" class=\"btn btn-default\">Evaluate</button> " +
                                "</form>";

                            description += "<hr />";
                        }
                    });
                    document.getElementById('descriptionPannel').innerHTML = description;
                }
            });
        }

        function clearOverlays() {
            for (var i = 0; i < markersArray.length; i++) {
                markersArray[i].setMap(null);
            }
            markersArray.length = 0;
        }

        function placeDetailsById(placeId) {
            service.getDetails({
                placeId: placeId
            },
                function (place, status) {
                    if (status === window.google.maps.places.PlacesServiceStatus.OK) {
                        console.log(place);
                        //createPhotoMarker(place);
                    }
                });
        }

        function createPhotoMarker(place) {
            var photos = place.photos;
            if (!photos) {
                alert("no photo");
                return;
            }
            markersArray[0] = new window.google.maps.Marker({
                map: map,
                position: place.geometry.location,
                title: place.name,
                icon: photos[0].getUrl({ 'maxWidth': 35, 'maxHeight': 35 })
            });

            console.log(markersArray[0]);
        }
    }
</script>

@section Scripts {
    <script async defer
            type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDfFiQB4uFA8_lS-24Ll1EFUXxfGVGoJWs&libraries=places&callback=initMap">
    </script>
    <script type="text/javascript">
        var arrDescription = [];

        $(".search").keypress(function() {
            if ($(".search").val().length >= 3) {
                arrDescription = [];
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("Get", "PlacesAutoComplete")/' + $(".search").val(),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function(data) {
                        //console.log(data);
                        data.forEach(function(element) {
                            arrDescription.push(element.description);
                        });
                    },
                    error: window.errorFunc
                });
                $( ".search" ).autocomplete({
                    source: arrDescription,
                    position: { my: "left top ", at: "left+0 top+30"  }
                });
            }
        });

    </script>

}




